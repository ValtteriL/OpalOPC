---

# Build OpalOPC for all platforms with given version number, transfer builds to webserver

- name: Publish
  hosts: all

  vars_prompt:
    - name: version
      prompt: Version for this release?
      private: false

  vars:
    linux_build: "{{ repo_root.stdout }}/build/linux/opalopc"
    win_packages_path: "{{ repo_root.stdout }}/build/win/"
    report_resources: "{{ repo_root.stdout }}/OpalOPC/report-resources"

    snap_build_folder: opalopc-snap-build
    snap_channel: "latest/edge"
    remote_linux_build: "{{ remote_linux_build_folder }}/opalopc"
    remote_linux_build_folder: "{{ snap_build_folder }}/{{ build_folder_bin }}"
    local_logo: "{{ repo_root.stdout }}/snapcraft-resources/logo-256-256.png"
    build_folder_bin: "bin"

    windows_temp_build_folder: /mnt/c/Users/valtteri/AppData/Local/Temp/opalopc-build
    version_update_script: |
      [xml]$manifest= get-content "./WindowsPackaging/Package.appxmanifest"; $manifest.Package.Identity.Version = "{{ version | mandatory }}"; $manifest.save("./WindowsPackaging/Package.appxmanifest")

  tasks:

    - name: Local preparations
      delegate_to: localhost
      block:
        - name: Check tag does not exist
          local_action:
            module: ansible.builtin.shell
            cmd: >
              if [ ! $(git tag -l "{{ version | mandatory }}") ]; then
                echo "Tag does not exists yet"
              else
                echo "Tag with this version already exists"
                exit 1
              fi

        - name: Get repo root path
          local_action:
            module: ansible.builtin.shell
            cmd: >
              git rev-parse --show-toplevel
          register: repo_root

        - name: Build CLI applications
          local_action: 
            module: ansible.builtin.shell
            cmd: >
              dotnet publish OpalOPC
              --runtime "{{ item.runtime }}"
              --self-contained
              --output {{ item.output }}
              /p:AssemblyVersion="{{ version | mandatory }}"
            chdir: "{{ repo_root.stdout }}"
          loop:
            - { runtime: linux-x64, output: build/linux }

    - name: Build & publish snap
      delegate_to: opalopc-snap-builder
      block:
        - name: Create directories for build
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
          with_items:
            - "{{ snap_build_folder }}"
            - "{{ remote_linux_build_folder }}"

        - name: Copy opalopc build over
          ansible.builtin.copy:
            src: "{{ linux_build }}"
            dest: "{{ remote_linux_build }}"
            mode: '0775'

        - name: Copy icon build over
          ansible.builtin.copy:
            src: "{{ local_logo }}"
            dest: "{{ snap_build_folder }}/"

        - name: Move snapcraft file to build directory
          ansible.builtin.template:
            src: snapcraft.yaml.j2
            dest: "{{ snap_build_folder }}/snapcraft.yaml"

        - name: Build snap
          ansible.builtin.shell:
            cmd: >
              snapcraft
            chdir: "{{ snap_build_folder }}"

        - name: Publish snap
          ansible.builtin.shell:
            cmd: "snapcraft upload --release={{ snap_channel }} opalopc_{{ version }}_amd64.snap"
            chdir: "{{ snap_build_folder }}"

    - name: Build and package Windows applications (CLI and GUI)
      delegate_to: localhost
      block:
        - name: Create windows temp build folder
          ansible.builtin.file:
            path: "{{ windows_temp_build_folder }}"
            state: directory

        - name: Copy repo to temp folder on Windows side
          ansible.builtin.shell:
            cmd: >
              git archive --format=tar HEAD | (cd {{windows_temp_build_folder}} && tar xf -)
            chdir: "{{ repo_root.stdout }}"

        # Update appxmanifest. This must be done before the build.
        - name: Version Package Manifest
          ansible.builtin.shell:
            cmd: >
              powershell.exe -encodedCommand "{{ version_update_script | b64encode(encoding='utf-16-le') }}"
            chdir: "{{ windows_temp_build_folder }}"

        - name: Build and package applications
          register: result
          until: result.rc == 0
          retries: 1
          ansible.builtin.shell:
            cmd: >
              powershell.exe
              MSBuild.exe ./WindowsPackaging/WindowsPackaging.wapproj
              /t:restore,publish
              /p:Configuration=Release
              /p:Platform="AnyCPU"
              /p:AppxBundlePlatforms="neutral"
              /p:AppxPackageDir="build"
              /p:AppxBundle=Always
              /p:UapAppxPackageBuildMode=StoreUpload
              /p:AppxPackageSigningEnabled=true
              /p:AssemblyVersion="{{ version | mandatory }}"
            chdir: "{{ windows_temp_build_folder }}"

        - name: Copy built package to linux side
          ansible.builtin.copy:
            src: "{{ windows_temp_build_folder }}/WindowsPackaging/build/"
            dest: "{{ win_packages_path }}"

        - name: delete windows temp build folder
          ansible.builtin.file:
            path: "{{ windows_temp_build_folder }}"
            state: absent

        - name: A helpful reminder to submit updated Windows package to Microsoft Store
          ansible.builtin.pause:
            prompt: "Make sure to submit Windows package to Microsoft Store (Version {{ version }} in {{ win_packages_path }})"

        - name: A helpful reminder to promote the snap package from latest/edge to latest/stable
          ansible.builtin.pause:
            prompt: "Make sure to promote the build (version {{ version }}) to latest/stable in https://snapcraft.io/opalopc/releases"

    - name: Local finishing touches
      delegate_to: localhost
      block:
        - name: Tag repository with version
          local_action:
            module: ansible.builtin.shell
            cmd: >
              if [ ! $(git tag -l "{{ version | mandatory }}") ]; then
                git tag "{{ version | mandatory }}"
                git push origin "{{ version | mandatory }}"
              fi
