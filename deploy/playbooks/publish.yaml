---

# Build OpalOPC for all platforms with given version number, transfer builds to webserver

- name: Publish
  hosts: all

  vars_prompt:
    - name: version
      prompt: Version for this release?
      private: false

  vars:
    path_fix: ../../
    linux_build: "{{ path_fix }}build/linux/opalopc"
    win_build: "{{ path_fix }}build/win/opalopc.exe"
    osx_build: "{{ path_fix }}build/osx/opalopc"
    report_resources: "{{ path_fix }}OpalOPC/report-resources"
    version_txt_web_path: /var/www/opalopc.com/VERSION.txt
    release_web_path: /var/www/opalopc.com/releases
    report_resources_web_path: "/var/www/opalopc.com/report-resources/{{ version | mandatory }}"
    debug_report_resource_path_regex: 'http:\/\/localhost:8000\/OpalOPC\/report-resources'
    final_report_resource_path: "https://opalopc.com/report-resources/{{ version | mandatory }}"
    installer_path: "{{ path_fix }}OpalOPC/installers/install.sh"
    windows_installer_path: "{{ path_fix }}OpalOPC/installers/Output/OpalOPC-Installer.exe"
    installer_web_path: /var/www/opalopc.com/install.sh

  tasks:

    - name: Build applications
      local_action: 
        module: ansible.builtin.shell
        cmd: >
          dotnet publish OpalOPC
          --runtime "{{ item.runtime }}"
          --self-contained
          --output {{ item.output }}
          /p:AssemblyVersion="{{ version | mandatory }}"
        chdir: "{{ path_fix }}"
      loop:
        - { runtime: linux-x64, output: build/linux }
        - { runtime: win-x64, output: build/win }
        - { runtime: osx-x64, output: build/osx }

    - name: Sign applications
      local_action:
        module: ansible.builtin.shell
        cmd: >
          gpg
          --local-user C2AB7F2AF5FAFEF5A84DB87C6DBD4E9ECDF59BC5
          --pinentry-mode loopback
          --yes --detach-sign
          --armor
          "{{ item }}"
        chdir: "{{ path_fix }}"
      loop:
        - build/linux/opalopc
        - build/osx/opalopc
        - build/win/opalopc.exe

    - name: Build Windows installer
      local_action:
        module: ansible.builtin.shell
        cmd: >
          ISCC.exe
          /DMyAppVersion={{ version | mandatory }}
          OpalOPC/installers/windows.iss
        chdir: "{{ path_fix }}"

    - name: Create releases directory
      become: true
      ansible.builtin.file:
        path: "{{ release_web_path }}"
        owner: root
        group: www-data
        state: directory

    # create directory for version with subdir per OS
    # dont replace if already exists (for safety measure)
    - name: Transfer applications to webserver (version subdir)
      become: true
      ansible.builtin.copy:
        src: "{{ item.build }}"
        dest: "{{ item.directory }}/{{ item.subdir }}/"
        owner: root
        group: root
        force: false
      loop:
        - { build: "{{ linux_build }}", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'linux'}
        - { build: "{{ win_build }}", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'windows'}
        - { build: "{{ osx_build }}", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'osx'}
        - { build: "{{ linux_build }}.asc", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'linux'}
        - { build: "{{ win_build }}.asc", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'windows'}
        - { build: "{{ osx_build }}.asc", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'osx'}
        - { build: "{{ windows_installer_path }}", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'windows'}

    # move builds to latest with subdir per OS
    - name: Copy applications to latest subdir
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ release_web_path }}/{{ version | mandatory }}/{{ item.subdir }}/"
        dest: "{{ release_web_path }}/latest/{{ item.subdir }}/"
        owner: root
        group: root
      loop:
        - { subdir: 'linux'}
        - { subdir: 'windows'}
        - { subdir: 'osx'}
        - { subdir: 'linux'}
        - { subdir: 'windows'}
        - { subdir: 'osx'}
        - { subdir: 'windows'}

    - name: Transfer report resources to webserver
      become: true
      ansible.builtin.copy:
        src: "{{ report_resources }}/"
        dest: "{{ report_resources_web_path }}/"
        owner: root
        group: root
        force: false

    - name: Translate debug report resource references to production
      become: true
      ansible.builtin.replace:
        path: "/var/www/opalopc.com/report-resources/{{ version | mandatory }}/stylesheet.xsl"
        regexp: "{{ debug_report_resource_path_regex }}"
        replace: "{{ final_report_resource_path }}"

    - name: Update VERSION.txt
      become: true
      ansible.builtin.copy:
        dest: "{{ version_txt_web_path }}"
        content: "{{ version | mandatory }}"
        owner: root
        group: root

    - name: Deploy linux-mac installer
      become: true
      ansible.builtin.copy:
        src: "{{ installer_path | mandatory }}"
        dest: "{{ installer_web_path | mandatory }}"
        owner: root
        group: root
