---

# Build OpalOPC for all platforms with given version number, transfer builds to webserver

- name: Publish
  hosts: all

  vars_prompt:
    - name: version
      prompt: Version for this release?
      private: false

  vars:
    linux_build: "{{ repo_root.stdout }}/build/linux/opalopc"
    win_build: "{{ repo_root.stdout }}/build/win/opalopc.exe"
    win_gui_build: "{{ repo_root.stdout }}/build/win-gui/opalopc-gui.exe"
    osx_build: "{{ repo_root.stdout }}/build/osx/opalopc"
    report_resources: "{{ repo_root.stdout }}/OpalOPC/report-resources"
    version_txt_web_path: /var/www/opalopc.com/VERSION.txt
    release_web_path: /var/www/opalopc.com/releases
    report_resources_web_path: "/var/www/opalopc.com/report-resources/{{ version | mandatory }}"
    debug_report_resource_path_regex: 'http:\/\/localhost:8000\/OpalOPC\/report-resources'
    final_report_resource_path: "https://opalopc.com/report-resources/{{ version | mandatory }}"
    installer_path: "{{ repo_root.stdout }}/OpalOPC/installers/install.sh"
    windows_installer_path: "{{ repo_root.stdout }}/OpalOPC/installers/Output/OpalOPC-Installer.exe"
    installer_web_path: /var/www/opalopc.com/install.sh
    eula_path: "{{ repo_root.stdout }}/OpalOPC/EULA.txt"
    eula_web_path: /var/www/opalopc.com/EULA.txt
    windows_temp_build_folder: /mnt/c/Users/valtteri/AppData/Local/Temp/opalopc-gui-build

  tasks:

    - name: Get repo root path
      local_action:
        module: ansible.builtin.shell
        cmd: >
          git rev-parse --show-toplevel
      register: repo_root

    - name: Build CLI applications
      local_action: 
        module: ansible.builtin.shell
        cmd: >
          dotnet publish OpalOPC
          --runtime "{{ item.runtime }}"
          --self-contained
          --output {{ item.output }}
          /p:AssemblyVersion="{{ version | mandatory }}"
        chdir: "{{ repo_root.stdout }}"
      loop:
        - { runtime: linux-x64, output: build/linux }
        - { runtime: win-x64, output: build/win }
        - { runtime: osx-x64, output: build/osx }

    - name: Build GUI application
      block:
        - name: Create windows temp build folder
          local_action:
            module: ansible.builtin.file
            path: "{{ windows_temp_build_folder }}"
            state: directory

        - name: Copy repo to temp folder on Windows side
          local_action:
            module: ansible.builtin.shell
            cmd: >
              git archive --format=tar HEAD | (cd {{windows_temp_build_folder}} && tar xf -)
            chdir: "{{ repo_root.stdout }}"

        - name: Build GUI application
          local_action:
            module: ansible.builtin.shell
            cmd: >
              powershell.exe
              dotnet publish OpalOPC.WPF
              --runtime "{{ item.runtime }}"
              --self-contained
              --output {{ item.output }}
              /p:AssemblyVersion="{{ version | mandatory }}"
            chdir: "{{ windows_temp_build_folder }}"
          loop:
            - { runtime: win-x64, output: build/win-gui }

        - name: Copy built GUI app to linux side
          local_action:
            module: ansible.builtin.copy
            src: "{{ windows_temp_build_folder }}/build/win-gui"
            dest: "{{ repo_root.stdout }}/build/"

        - name: delete windows temp build folder
          local_action:
            module: ansible.builtin.file
            path: "{{ windows_temp_build_folder }}"
            state: absent

    - name: Sign *nix applications
      local_action:
        module: ansible.builtin.shell
        cmd: >
          gpg
          --local-user C2AB7F2AF5FAFEF5A84DB87C6DBD4E9ECDF59BC5
          --pinentry-mode loopback
          --yes --detach-sign
          --armor
          "{{ item }}"
        chdir: "{{ repo_root.stdout }}"
      loop:
        - build/linux/opalopc
        - build/osx/opalopc

    - name: Build Windows installer
      block:
        - name: Set Version
          local_action:
            module: ansible.builtin.shell
            cmd: >
              powershell.exe
              AdvancedInstaller.com
              /edit
              OpalOPC.aip
              /SetVersion "{{ version | mandatory }}"
            chdir: "{{ repo_root.stdout }}"

        - name: Build installer
          local_action:
            module: ansible.builtin.shell
            cmd: >
              powershell.exe
              AdvancedInstaller.com
              /build
              OpalOPC.aip
            chdir: "{{ repo_root.stdout }}"

        - name: Undo changes to installer file (aip)
          local_action:
            module: ansible.builtin.shell
            cmd: >
              git checkout -- OpalOPC.aip
            chdir: "{{ repo_root.stdout }}"

    - name: Create releases directory
      become: true
      ansible.builtin.file:
        path: "{{ release_web_path }}"
        owner: root
        group: root
        state: directory

    # create directory for version with subdir per OS
    # dont replace if already exists (for safety measure)
    - name: Transfer *nix applications to webserver (version subdir)
      become: true
      ansible.builtin.copy:
        src: "{{ item.build }}"
        dest: "{{ item.directory }}/{{ item.subdir }}/"
        owner: root
        group: root
        force: false
      loop:
        - { build: "{{ linux_build }}", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'linux'}
        - { build: "{{ osx_build }}", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'osx'}
        - { build: "{{ linux_build }}.asc", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'linux'}
        - { build: "{{ osx_build }}.asc", directory: "{{ release_web_path }}/{{ version | mandatory }}", subdir: 'osx'}

    # move builds to latest with subdir per OS
    - name: Copy *nix applications to latest subdir
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ release_web_path }}/{{ version | mandatory }}/{{ item.subdir }}/"
        dest: "{{ release_web_path }}/latest/{{ item.subdir }}/"
        owner: root
        group: root
      loop:
        - { subdir: 'linux'}
        - { subdir: 'osx'}

    - name: Transfer report resources to webserver
      become: true
      ansible.builtin.copy:
        src: "{{ report_resources }}/"
        dest: "{{ report_resources_web_path }}/"
        owner: root
        group: root
        force: false

    - name: Translate debug report resource references to production
      become: true
      ansible.builtin.replace:
        path: "/var/www/opalopc.com/report-resources/{{ version | mandatory }}/stylesheet.xsl"
        regexp: "{{ debug_report_resource_path_regex }}"
        replace: "{{ final_report_resource_path }}"

    - name: Deploy linux-mac installer
      become: true
      ansible.builtin.copy:
        src: "{{ installer_path | mandatory }}"
        dest: "{{ installer_web_path | mandatory }}"
        owner: root
        group: root

    - name: A helpful reminder to submit updated Windows installer to Microsoft Store
      ansible.builtin.pause:
        prompt: "Make sure to submit Windows installer to Microsoft Store (OpalOPC Setup.msi on desktop)"

    - name: Deploy EULA.txt
      become: true
      ansible.builtin.copy:
        src: "{{ eula_path | mandatory }}"
        dest: "{{ eula_web_path | mandatory }}"
        owner: root
        group: root

    - name: Update VERSION.txt
      become: true
      ansible.builtin.copy:
        dest: "{{ version_txt_web_path }}"
        content: "{{ version | mandatory }}"
        owner: root
        group: root
