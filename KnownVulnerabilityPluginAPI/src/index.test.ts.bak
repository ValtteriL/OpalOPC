/* eslint-disable no-tabs */
/* eslint-disable @typescript-eslint/indent */
import { unstable_dev } from 'wrangler'
import type { UnstableDevWorker } from 'wrangler'
import { describe, expect, it, afterAll, beforeAll, jest } from '@jest/globals'
import { type BuildInfo } from './types'
import { constructCpeName } from './cpe-name-util'
import { getCVEsForCPE } from './cve-api-util'

const validHeaders = {
	Accept: 'application/json',
	'Content-Type': 'application/json;charset=UTF-8'
}

const validBuildInfo: BuildInfo = {
	productUri: 'productUri',
	manufacturerName: 'manufacturerName',
	productName: 'productName',
	softwareVersion: 'softwareVersion',
	buildNumber: 'buildNumber',
	buildDate: new Date()
}

describe('KnownVulnerabilityPluginAPI', () => {
	let worker: UnstableDevWorker

	beforeAll(async () => {
		worker = await unstable_dev('src/index.ts', {
			experimental: { disableExperimentalWarning: true }
		})
	})

	afterAll(async () => {
		await worker.stop()
	})

	it('should return 405 on get', async () => {
		const resp = await worker.fetch()
		expect(resp.status).toBe(405)
	})

	it('should return error on invalid POST', async () => {
		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify({
				kekekek: 'kekekek'
			})
		}
		)
		expect(resp.status).toBe(500)
	})

	it('should return 500 if constructCpeName fails', async () => {

		constructCpeName = jest.fn().mockImplementationOnce(() => { throw Error('constructCpeName failed') })

		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify(validBuildInfo)
		}
		)
		expect(resp.status).toBe(500)
	})

	it('should return 500 if getCVEsForCPE fails', async () => {
		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify(validBuildInfo)
		}
		)
		expect(resp.status).toBe(500)
	})

	it('should return whatever getCVEsForCPE returns', async () => {
		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify(validBuildInfo)
		}
		)
		expect(constructCpeName).toHaveBeenCalled()
		expect(getCVEsForCPE).toHaveBeenCalled()
		expect(resp.status).toBe(200)
	})
})
