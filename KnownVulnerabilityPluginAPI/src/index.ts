import { createFetchConfig } from './api-common'
import { constructCpeName } from './cpe-name-util'
import { type CVEResult, getCVEsForCPE } from './cve-api-util'

export interface BuildInfo {
  productUri: string
  manufacturerName: string
  productName: string
  softwareVersion: string
  buildNumber: string
  buildDate: Date
}

export interface Env {
  API_KEY: string
}

export default {
  async fetch (request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    if (request.method !== 'POST') {
      return new Response('Method not allowed', { status: 405 })
    }

    // parse the build info from the request body
    const buildInfo: BuildInfo = await request.json()

    // construct the CPE name
    const cpe: string = await constructCpeName(buildInfo, env)

    // fetch the CVE data for CPE
    const results = await getCVEsForCPE(cpe, env).then((cveResponse: CVEResult) => { return JSON.stringify(cveResponse) })

    // return the response
    return new Response(results, createFetchConfig(env))
  }
}
