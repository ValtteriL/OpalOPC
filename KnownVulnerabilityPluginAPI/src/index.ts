import { NoCPEMatchFoundError, constructCpeName } from './cpe-name-util'
import { getCVEsForCPE } from './cve-api-util'
import { type Env, type CVEResult, type BuildInfo } from './types'

export default {
  async fetch (request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    if (request.method !== 'POST') {
      return new Response('Method not allowed', { status: 405 })
    }

    // parse the build info from the request body
    const buildInfo: BuildInfo = await request.json()

    // construct the CPE name
    try {
      const cpe: string = await constructCpeName(buildInfo, env)
      // fetch the CVE data for CPE
      const results = await getCVEsForCPE(cpe, env).then((cveResponse: CVEResult) => { return JSON.stringify(cveResponse) })

      // return the response
      return new Response(results, {
        headers: {
          'content-type': 'application/json;charset=UTF-8'
        }
      })
    } catch (e) {
      if (e instanceof NoCPEMatchFoundError) {
        return new Response('Manufacturer or product not found', { status: 404 })
      }

      console.log(e)
      throw e
    }
  }
}
