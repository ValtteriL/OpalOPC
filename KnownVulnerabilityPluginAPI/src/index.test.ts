/* eslint-disable no-tabs */
/* eslint-disable @typescript-eslint/indent */

// Integration tests for API
import { unstable_dev } from 'wrangler'
import type { UnstableDevWorker } from 'wrangler'
import { describe, expect, it, afterAll, beforeAll } from '@jest/globals'
import { type CVEResult, type BuildInfo } from './types'

const validHeaders = {
	Accept: 'application/json',
	'Content-Type': 'application/json;charset=UTF-8'
}

describe('KnownVulnerabilityPluginAPI', () => {
	let worker: UnstableDevWorker

	beforeAll(async () => {
		worker = await unstable_dev('src/index.ts', {
			experimental: { disableExperimentalWarning: true }
		})
	})

	afterAll(async () => {
		await worker.stop()
	})

	it('should return 405 on get', async () => {
		const resp = await worker.fetch()
		expect(resp.status).toBe(405)
	})

	it('should return error on invalid POST', async () => {
		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify({
				kekekek: 'kekekek'
			})
		}
		)
		expect(resp.status).toBe(500)
	})

	it('should return 404 for inexistent buildinfo', async () => {
		const bogusBuildInfo: BuildInfo = {
			productUri: 'thisdoesnotmatter',
			manufacturerName: 'olematon',
			productName: 'olematon',
			softwareVersion: '1.0',
			buildNumber: 'thisdoesnotmatter',
			buildDate: new Date()
		}

		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify(bogusBuildInfo)
		})
		expect(resp.status).toBe(404)
	}, 60 * 1000)

	it('should return result for valid vulnerable buildinfo', async () => {
		const validVulnerableBuildInfo: BuildInfo = {
			productUri: 'urn:prosysopc.com:OPCUA:SimulationServer',
			manufacturerName: 'Prosys OPC Ltd.',
			productName: 'SimulationServer@echo',
			softwareVersion: '5.4.2',
			buildNumber: '148',
			buildDate: new Date()
		}

		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify(validVulnerableBuildInfo)
		}
		)
		expect(resp.status).toBe(200)
		const data: CVEResult = await resp.json() as CVEResult
		expect(data.totalResults).toBeGreaterThan(0)
	}, 60 * 1000)

	it('should return empty for non-vulnerable buildinfo', async () => {
		const bogusBuildInfo: BuildInfo = {
			productUri: 'urn:prosysopc.com:OPCUA:SimulationServer',
			manufacturerName: 'Prosys OPC Ltd.',
			productName: 'SimulationServer@echo',
			softwareVersion: '99.9.9', // to be on the safe side...
			buildNumber: '148',
			buildDate: new Date()
		}

		const resp = await worker.fetch('any', {
			method: 'POST',
			headers: validHeaders,
			body: JSON.stringify(bogusBuildInfo)
		})
		expect(resp.status).toBe(200)

		const response: CVEResult = await resp.json() as CVEResult
		expect(response.totalResults).toBe(0)
	}, 60 * 1000)
})
