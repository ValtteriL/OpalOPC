/* eslint-disable no-tabs */
/* eslint-disable @typescript-eslint/indent */
import { describe, expect, it, jest } from '@jest/globals'
import { type Env, type BuildInfo, type CPEResult } from './types'
import { constructCpeName } from './cpe-name-util'
import { getCPEDetails } from './cpe-api-util'

const env: Env = {
	API_KEY: 'doesnotmatter'
}

const buildInfo: BuildInfo = {
	productUri: 'productUri',
	manufacturerName: 'manufacturerName',
	productName: 'productName',
	softwareVersion: 'softwareVersion',
	buildNumber: 'buildNumber',
	buildDate: new Date()
}

const expectedCpeName: string = `cpe:2.3:a:${buildInfo.manufacturerName}:${buildInfo.productName}:${buildInfo.softwareVersion}:*:*:*:*:*:*:*`

jest.mock('./cpe-api-util')

describe('constructCpeName', () => {
	it('should throw error when getCPEDetails throws', async () => {
		(getCPEDetails as jest.Mock).mockImplementation(() => {
			throw new Error()
		})
		expect(async () => { await constructCpeName(buildInfo, env) }).rejects.toThrow()
	})

	it('should throw error when getCPEDetails returns empty when searching for vendor', async () => {
		(getCPEDetails as jest.Mock).mockImplementation(() => {
			const asd: CPEResult = {
				resultsPerPage: 0,
				startIndex: 0,
				totalResults: 0,
				format: 'NVD_CPE',
				version: '2.0',
				timestamp: '2024-02-22T11:20:43.840',
				products: []
			}
			return asd
		})
		expect(async () => { await constructCpeName(buildInfo, env) }).rejects.toThrow()
	})

	it('should throw error when getCPEDetails returns empty when searching for product', async () => {
		(getCPEDetails as jest.Mock).mockImplementationOnce(() => {
			const result1: CPEResult = {
				totalResults: 0,
				products: [
					{
						cpe: {
							cpeName: expectedCpeName
						}
					}
				]
			}
			return result1
		}).mockImplementationOnce(() => {
			const result2: CPEResult = {
				totalResults: 0,
				products: []
			}
			return result2
		})

		expect(async () => { await constructCpeName(buildInfo, env) }).rejects.toThrow()
	})

	it('should return cpeName', async () => {
		(getCPEDetails as jest.Mock).mockImplementationOnce(() => {
			const result1: CPEResult = {
				totalResults: 1,
				products: [
					{
						cpe: {
							cpeName: expectedCpeName
						}
					}
				]
			}
			return result1
		}).mockImplementationOnce(() => {
			const result2: CPEResult = {
				totalResults: 1,
				products: [
					{
						cpe: {
							cpeName: expectedCpeName
						}
					}
				]
			}
			return result2
		})
		const cpe: string = await constructCpeName(buildInfo, env)
		expect(getCPEDetails).toHaveBeenCalledTimes(2)
		expect(cpe).toBe(expectedCpeName)
	})
})
