using System.Text.Json;
using KnownVulnerabilityAPI.Models;
using KnownVulnerabilityAPI.Services;
using Microsoft.AspNetCore.Mvc;

namespace KnownVulnerabilityAPI.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class VulnerabilityController(ILogger<VulnerabilityController> logger, ICPEService cpeService, ICVEService cveService) : ControllerBase
    {
        [HttpPost]
        public async Task<ActionResult<CVEResult>> Post(StrictBuildInfo buildInfo)
        {
            logger.LogInformation("{msg}", $"Received buildinfo: {JsonSerializer.Serialize(buildInfo)}");

            // TODO: cache results https://learn.microsoft.com/en-us/aspnet/core/performance/caching/memory?view=aspnetcore-8.0

            try
            {
                // figure out CPE
                string cpe = await cpeService.constructCPEName(buildInfo);
                logger.LogInformation("{msg}", $"Constructed CPE: {cpe}");

                // find CVEs for CPE
                CVEResult cveResult = await cveService.GetCVEs(cpe);
                logger.LogInformation("{msg}", $"Found {cveResult.totalResults} CVEs");

                // then return CVEs
                return cveResult;
            }
            catch (VendorNotFoundException e)
            {
                logger.LogInformation("{msg}", "KEKEKEKEK");
                logger.LogError("{msg}", e.Message);
                return NotFound("Failed to find vendor name");
            }
            catch (ProductNotFoundException e)
            {
                logger.LogError("{msg}", e.Message);
                return NotFound("Failed to find product name");
            }

        }
    }
}
