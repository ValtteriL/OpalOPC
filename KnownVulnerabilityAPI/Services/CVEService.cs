using KnownVulnerabilityAPI.Models;

namespace KnownVulnerabilityAPI.Services
{
    public interface ICVEService
    {
        public Task<CVEResult> GetCVEs(string cpe);
    }
    public class CVEService(INVDAPIService nvdAPIService, ICacheService cacheService, ILogger<CVEService> logger) : ICVEService
    {
        private readonly SemaphoreSlim _semaphore = new(1);

        public async Task<CVEResult> GetCVEs(string cpe)
        {
            await _semaphore.WaitAsync();
            try
            {
                CVEResult result = await Get(cpe);
                return result;
            }
            finally
            {
                _semaphore.Release();
            }
        }

        private async Task<CVEResult> Get(string cpe)
        {
            // first check cache
            CVEResult? cachedResult = cacheService.TryGetCVE(cpe);
            if (cachedResult != null)
            {
                logger.LogInformation("{msg}", $"Using cached value for CVE query {cpe}");
                return cachedResult;
            }

            // if not found in cache, query NVD API
            logger.LogInformation("{msg}", $"Querying CVE for {cpe}");
            CVEResult result = await nvdAPIService.QueryCVE(cpe) ?? throw new Exception("Failed to parse CVE JSON");

            // cache the result
            cacheService.cacheCVE(cpe, result);

            return result;
        }
    }
}
