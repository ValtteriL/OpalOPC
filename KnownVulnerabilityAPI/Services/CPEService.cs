using System.Collections;

namespace KnownVulnerabilityAPI.Services
{
    public interface ICPEService
    {
        Task<string> constructCPEName(StrictBuildInfo buildInfo);
    }
    public class CPEService(INVDAPIService nvdAPI, INameFormatterService nameFormatter, ILogger<CPEService> logger) : ICPEService
    {
        readonly string _version = "2.3";
        readonly string _part = "a";

        public async Task<string> constructCPEName(StrictBuildInfo buildInfo)
        {
            string vendor = await findVendorName(buildInfo.Manufacturer);
            string product = await findProductName(buildInfo.ProductName, vendor);
            return $"cpe:{_version}:{_part}:{vendor}:{product}:{buildInfo.SoftwareVersion}:*:*:*:*:*:*:*";
        }

        private async Task<string> findVendorName(string manufacturer)
        {
            string normalizedName = nameFormatter.FormatName(manufacturer);

            // split the normalizedName by spaces, and create stack of it
            Stack nameStack = new(normalizedName.Split(" "));

            // pop from stack until it's empty
            while (nameStack.Count > 0)
            {

                string query = string.Join(" ", nameStack.ToArray());
                logger.LogInformation("{msg}", $"Querying CPE for {query}");
                CPEResult cpeResult = await nvdAPI.QueryCPE(query) ?? throw new Exception("Failed to parse CPE JSON");

                if (cpeResult.totalResults > 0)
                {
                    string cpeName = cpeResult.products[0].cpe.cpeName;
                    string vendor = cpeName.Split(':')[3];
                    return vendor;
                }

                nameStack.Pop();
            }

            throw new VendorNotFoundException("Failed to find vendor name");
        }

        private async Task<string> findProductName(string productName, string vendor)
        {
            string normalizedProductName = nameFormatter.FormatName(productName);

            // split the normalizedName by spaces, and create stack of it
            Stack nameStack = new(normalizedProductName.Split(" "));

            // pop from stack until it's empty
            while (nameStack.Count > 0)
            {
                string subquery = string.Join(" ", nameStack.ToArray());
                string query = $"{vendor} {subquery}";

                logger.LogInformation("{msg}", $"Querying CPE for {query}");

                CPEResult cpeResult = await nvdAPI.QueryCPE(query) ?? throw new Exception("Failed to parse CPE JSON");

                if (cpeResult.totalResults > 0)
                {
                    string cpeName = cpeResult.products[0].cpe.cpeName;
                    string product = cpeName.Split(':')[4];
                    return product;
                }

                nameStack.Pop();
            }

            throw new ProductNotFoundException("Failed to find product name");
        }

        private static string getTotalResults(dynamic json)
        {
            return json["totalResults"];
        }

    }
}
