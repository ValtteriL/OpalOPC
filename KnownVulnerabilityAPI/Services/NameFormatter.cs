using System.Text.RegularExpressions;

namespace KnownVulnerabilityAPI.Services
{
    public static partial class NameFormatter
    {
        public static string[] FormatName(string name)
        {
            string normalizedName = NormalizeName(name);
            string[] tokenizedName = normalizedName.Split(" ");

            // limit name size to 5
            if (tokenizedName.Length > 5)
            {
                tokenizedName = tokenizedName.Take(5).ToArray();
            }

            // enclose all substrings with non alphanumeric values in double quotes to be able to search with special characters
            // such as dots (for version strings)
            // source of requirement: https://www.sqlite.org/fts5.html
            for (int i = 0; i < tokenizedName.Length; i++)
            {
                if (!Regex.IsMatch(tokenizedName[i], @"^[a-zA-Z0-9]+$"))
                    tokenizedName[i] = $"\"{tokenizedName[i]}\"";
            }

            return tokenizedName;
        }

        private static string NormalizeName(string name)
        {
            // convert all non-word or digit or dot characters to spaces
            name = MyRegex().Replace(name, " ");

            // convert multiple spaces to a single space
            name = MyRegex1().Replace(name, " ");

            // Look for long acronyms and filter out the last letter
            name = MyRegex2().Replace(name, "$1 $2");

            // Look for lower-case letters followed by upper-case letters
            //name = MyRegex3().Replace(name, "$1 $2");

            // Look for lower-case letters followed by numbers
            //name = MyRegex4().Replace(name, "$1 $2");

            // Remove any white space left around the word
            name = name.Trim();

            return name;
        }

        [GeneratedRegex(@"[^a-zA-Z\s\d\.]")]
        private static partial Regex MyRegex();
        [GeneratedRegex(@"\s+")]
        private static partial Regex MyRegex1();
        [GeneratedRegex(@"([A-Z]+)([A-Z][a-z])")]
        private static partial Regex MyRegex2();
        [GeneratedRegex(@"([a-z\d])([A-Z])")]
        private static partial Regex MyRegex3();
        [GeneratedRegex(@"([a-zA-Z])(\d)")]
        private static partial Regex MyRegex4();
    }
}
