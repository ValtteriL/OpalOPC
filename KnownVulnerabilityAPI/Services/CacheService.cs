using Microsoft.Extensions.Caching.Memory;

namespace KnownVulnerabilityAPI.Services
{
    public interface ICacheService
    {
        public CPEResult? TryGetCPE(string query);
        public CVEResult? TryGetCVE(string query);

        public void cacheCPE(string query, CPEResult cpeResult);
        public void cacheCVE(string cpe, CVEResult cveResult);
    }
    public class CacheService : ICacheService
    {
        private readonly MemoryCache _memoryCache;
        private readonly MemoryCacheEntryOptions _memoryCacheEntryOptions;

        public CacheService()
        {
            _memoryCacheEntryOptions = new MemoryCacheEntryOptions()
                .SetAbsoluteExpiration(TimeSpan.FromDays(7)) // cache for 7 days
                .SetSize(1); // each cache entry has size 1


            _memoryCache = new MemoryCache(new MemoryCacheOptions()
            {
                SizeLimit = 1024 // a total of 1024 cache entries can be stored
            });
        }

        public void cacheCPE(string query, CPEResult cpeResult)
        {
            storeInCache(query, cpeResult);
        }

        public void cacheCVE(string cpe, CVEResult cveResult)
        {
            storeInCache(cpe, cveResult);
        }

        public CPEResult? TryGetCPE(string query)
        {
            return _memoryCache.Get(query) as CPEResult;
        }
        public CVEResult? TryGetCVE(string cpe)
        {
            return _memoryCache.Get(cpe) as CVEResult;
        }

        private void storeInCache(string key, object value)
        {
            _memoryCache.Set(key, value, _memoryCacheEntryOptions);
        }
    }
}
