#!/usr/bin/perl

# Index all CVE data into a sqlite database
# Usage: index.pl {{ nvd_json_data_feeds_dir }} {{ cpe_dictionary_path }} {{ database_path }}

use strict;
use warnings;

use File::Find;
use File::Basename;
use File::Slurp;
use Data::Dumper;
use JSON;
use DBI;
use File::Find;
use XML::LibXML::Reader;

my @cve_files = ();

sub GetCPEIds {
  # parse cpe ids from a CVE json into array

  my $json = shift;
  my %json = %{$json};
  my @cpe_ids = ();

  my $configurations = $json{'configurations'};

  foreach my $config (@$configurations) {
    foreach my $nodes (@$config{'nodes'}) {
      foreach my $node (@$nodes) {
          foreach my $matches (@$node{'cpeMatch'}) {
            foreach my $match (@$matches) {
              foreach my $criteria (@$match{'criteria'}) {
                push(@cpe_ids, ($criteria));
              }
            }
          }
      }
    }
  }

  return @cpe_ids;
}

sub wanted {
  # collect CVE files to @cve_files
  /^CVE-.*\.json/ and push(@cve_files, $File::Find::name);
}

sub create_db_tables {
  # create tables in the database
  my $dbh = shift;

  # create cpe table
  $dbh->do("
  CREATE TABLE cpe (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    cpe TEXT UNIQUE
  )
  ") or die $dbh->errstr;

  # create cve table
  $dbh->do("
  CREATE TABLE cve (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    cve TEXT UNIQUE,
    file BLOB
  )
  ") or die $dbh->errstr;

  # create cve_cpe table
  $dbh->do("
  CREATE TABLE cpe_cves (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    cpe_id INTEGER,
    cve_id INTEGER,
    FOREIGN KEY(cpe_id) REFERENCES cpe(id),
    FOREIGN KEY(cve_id) REFERENCES cve(id)
  )
  ") or die $dbh->errstr;

  # create a table for full text search
  # https://www.sqlitetutorial.net/sqlite-full-text-search/
  $dbh->do("
  CREATE VIRTUAL TABLE cpedict
  USING FTS5(cpe, body)
  ") or die $dbh->errstr;
}

my ($nvd_json_data_feeds_dir, $cpe_dictionary_path, $db_path) = @ARGV;
unless (defined $nvd_json_data_feeds_dir && defined $cpe_dictionary_path && defined $db_path) {
  die "Usage: $0 <path_to_nvd_json_data_feeds_dir> <path_to_cpe_dictionary_file> <database_path>\n";
}


# delete the database if it already exists
unlink $db_path if -e $db_path;

# create a new database
my $dbh = DBI->connect("dbi:SQLite:uri=file:$db_path?mode=rwc");
create_db_tables($dbh);


$dbh->do('BEGIN TRANSACTION'); # batch all inserts into single transaction


# index nvd json data feeds

# find all CVE files in the data directory
find(\&wanted, ($nvd_json_data_feeds_dir));

# process all cve files
foreach(@cve_files) {

  # parse a single json
  my $json_text = read_file($_);
  my $json = JSON->new->decode($json_text);
  my %json = %{$json};

  # get required properties
  my $cve_id = $json{'id'};
  my @cpe_ids = GetCPEIds($json);

  # insert into db
  # cve
  my $cve_sth = $dbh->prepare("INSERT INTO cve (cve, file) VALUES (?, ?)");
  $cve_sth->execute($cve_id, $json_text) or die $cve_sth->errstr;
  my $cve_db_id = $cve_sth->last_insert_id();

  # cpe
  my $cpe_sth = $dbh->prepare("INSERT INTO cpe (cpe) VALUES (?) on conflict do update set cpe = excluded.cpe");
  foreach my $cpe_id (@cpe_ids) {
    $cpe_sth->execute($cpe_id) or die $cpe_sth->errstr;

    my $cpe_db_id = $cpe_sth->last_insert_id();

    # cve_cpe
    my $cve_cpe_sth = $dbh->prepare("INSERT INTO cpe_cves (cpe_id, cve_id) VALUES (?, ?)");
    $cve_cpe_sth->execute($cpe_db_id, $cve_db_id) or die $cve_cpe_sth->errstr;
  }
}


# index cpe dictionary

# read and parse cpe dict
open my $fh, '<:gzip', $cpe_dictionary_path or die "cannot read file '$cpe_dictionary_path': $!\n";
my $reader = XML::LibXML::Reader->new(IO => $fh);

while($reader->read) {
    next unless $reader->nodeType == XML_READER_TYPE_ELEMENT;
    next unless $reader->name eq 'cpe-item';

    # extract properties
    my $cpe_item = $reader->copyCurrentNode(1);
    my ($cpe) = $cpe_item =~ /(cpe:2.3:.*)"/;

    # store into db
    my $insert_sth = $dbh->prepare("
    INSERT INTO cpedict(cpe, body)
    VALUES(?, ?)
    ");
    $insert_sth->execute($cpe, $cpe_item) or die $insert_sth->errstr;

    $reader->next;
}

$dbh->do('COMMIT'); # finalize transaction