#!/usr/bin/perl

# Index all CVE data into a sqlite database
# Usage: index.pl {{ nvd_json_data_feeds_dir }} {{ cpe_dictionary_path }} {{ database_path }}

use strict;
use warnings;

use File::Find;
use File::Basename;
use File::Slurp;
use Data::Dumper;
use JSON;
use DBI;
use File::Find;
use XML::LibXML::Reader;

my @cve_files = ();

sub create_db_tables {
  # create tables in the database
  my $dbh = shift;

  # create a table for full text search
  # https://www.sqlitetutorial.net/sqlite-full-text-search/
  $dbh->do("
  CREATE VIRTUAL TABLE cpedict
  USING FTS5(cpe, body)
  ") or die $dbh->errstr;

}

my ($cpe_dictionary_path, $db_path) = @ARGV;
unless (defined $cpe_dictionary_path && defined $db_path) {
  die "Usage: $0 <path_to_cpe_dictionary_file> <database_path>\n";
}


# delete the database if it already exists
unlink $db_path if -e $db_path;

# create a new database
my $dbh = DBI->connect("dbi:SQLite:uri=file:$db_path?mode=rwc");
create_db_tables($dbh);


$dbh->do('BEGIN TRANSACTION'); # batch all inserts into single transaction


# index cpe dictionary

# read and parse cpe dict
open my $fh, '<:gzip', $cpe_dictionary_path or die "cannot read file '$cpe_dictionary_path': $!\n";
my $reader = XML::LibXML::Reader->new(IO => $fh);

while($reader->read) {
    next unless $reader->nodeType == XML_READER_TYPE_ELEMENT;
    next unless $reader->name eq 'cpe-item';

    # extract properties
    my $cpe_item = $reader->copyCurrentNode(1);
    my ($cpe) = $cpe_item =~ /(cpe:2.3:.*)"/;

    # store into db
    my $insert_sth = $dbh->prepare("
    INSERT INTO cpedict(cpe, body)
    VALUES(?, ?)
    ");
    $insert_sth->execute($cpe, $cpe_item) or die $insert_sth->errstr;

    $reader->next;
}

$dbh->do('COMMIT'); # finalize transaction
