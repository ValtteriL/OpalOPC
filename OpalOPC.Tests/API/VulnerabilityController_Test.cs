using KnownVulnerabilityAPI.Controllers;
using KnownVulnerabilityAPI.Models;
using KnownVulnerabilityAPI.Services;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace Tests.API
{
    public class VulnerabilityControllerTest
    {
        private readonly VulnerabilityController _vulnerabilityController;
        private readonly Mock<ILogger<VulnerabilityController>> _mockLogger = new();
        private readonly Mock<ICPEService> _mockCpeService = new();
        private readonly Mock<ICVEService> _mockCveService = new();

        public VulnerabilityControllerTest()
        {
            _vulnerabilityController = new VulnerabilityController(_mockLogger.Object, _mockCpeService.Object, _mockCveService.Object);
        }

        private static readonly StrictBuildInfo s_buildInfo = new()
        {
            Manufacturer = "prosysopc",
            ProductName = "simulationserver",
            SoftwareVersion = "1.0.0"
        };

        private readonly CVEResult _cVEResult = new()
        {
            format = "doesnotmatter",
            version = "doesnotmatter",
            totalResults = 1,
            vulnerabilities = []
        };

        [Fact]
        public async Task ReturnsCorrectResults()
        {
            // Arrange
            _mockCveService.Setup(x => x.GetCVEs(It.IsAny<string>())).ReturnsAsync(_cVEResult);

            // Act
            Microsoft.AspNetCore.Mvc.ActionResult<CVEResult> result = await _vulnerabilityController.Post(s_buildInfo);

            // Assert
            Assert.Equal(_cVEResult, result.Value);
        }

        [Fact]
        public async void ReturnsNotFoundIfVendorNotFound()
        {
            // Arrange
            _mockCpeService.Setup(x => x.ConstructCPEName(It.IsAny<StrictBuildInfo>())).Throws<VendorNotFoundException>();

            // Act
            Microsoft.AspNetCore.Mvc.ActionResult<CVEResult> result = await _vulnerabilityController.Post(s_buildInfo);

            // Assert
            Assert.IsType<Microsoft.AspNetCore.Mvc.NotFoundObjectResult>(result.Result);
        }

        [Fact]
        public async void ReturnsNotFoundIfProductNotFound()
        {
            // Arrange
            _mockCpeService.Setup(x => x.ConstructCPEName(It.IsAny<StrictBuildInfo>())).Throws<ProductNotFoundException>();

            // Act
            Microsoft.AspNetCore.Mvc.ActionResult<CVEResult> result = await _vulnerabilityController.Post(s_buildInfo);

            // Assert
            Assert.IsType<Microsoft.AspNetCore.Mvc.NotFoundObjectResult>(result.Result);
        }

        [Fact]
        public async void ThrowsIfCpeServiceThrows()
        {
            // Arrange
            _mockCpeService.Setup(x => x.ConstructCPEName(It.IsAny<StrictBuildInfo>())).Throws<Exception>();

            // Act & Assert
            await Assert.ThrowsAsync<Exception>(() => _vulnerabilityController.Post(s_buildInfo));
        }

    }
}
