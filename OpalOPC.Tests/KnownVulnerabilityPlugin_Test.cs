using System.Net.Http.Json;
using Microsoft.Extensions.Logging;
using Model;
using Moq;
using Opc.Ua;
using Opc.Ua.Client;
using Plugin;
using Util;
using Xunit;

namespace Tests;
public class KnownVulnerabilityPluginTest
{

    private readonly Mock<ILogger> _logger = new();
    private readonly Mock<IKnownVulnerabilityApiRequestUtil> _knownVulnerabilityUtil = new();
    private readonly Mock<ISession> _session = new();
    private readonly KnownVulnerabilityPlugin _plugin;

    private readonly CVEResult _emptyCveResult = new()
    {
        format = "doesnotmatter",
        version = "doesnotmatter",
        vulnerabilities = []
    };

    private static readonly List<(string, double)> _correctVulnerabilities = new()
    {
        ("CVE-123-456", 2.0),
        ("CVE-123-999", 7.0),
        ("CVE-123-932", 9.0)
    };

    private readonly CVEResult _cveResult = new()
    {
        format = "doesnotmatter",
        version = "doesnotmatter",
        vulnerabilities = [
            new Vulnerability()
            {
                cve = new Cve()
                {
                    id = _correctVulnerabilities[0].Item1,
                    metrics = new Metrics()
                    {
                        cvssMetricV2 = [new CvssMetricV2()
                        {
                            baseSeverity = "0.0", // wrong
                            cvssData = new CvssData()
                            {
                                baseScore = _correctVulnerabilities[0].Item2 // right
                            }
                        }],
                    },
                }
            },
            new Vulnerability()
            {
                cve = new Cve()
                {
                    id = _correctVulnerabilities[1].Item1,
                    metrics = new Metrics()
                    {
                        cvssMetricV2 = [new CvssMetricV2()
                        {
                            baseSeverity = "1.0", // wrong
                            cvssData = new CvssData()
                            {
                                baseScore = 1.0 // wrong
                            }
                        }],
                        cvssMetricV30 = [new CvssMetricV30()
                        {
                            cvssData = new CvssData()
                            {
                                baseScore = _correctVulnerabilities[1].Item2 // this is the correct one
                            }
                        }],
                    },
                }
            },
            new Vulnerability()
            {
                cve = new Cve()
                {
                    id = _correctVulnerabilities[2].Item1,
                    metrics = new Metrics()
                    {
                        cvssMetricV2 = [new CvssMetricV2()
                        {
                            baseSeverity = "1.0", // wrong
                            cvssData = new CvssData()
                            {
                                baseScore = 1.0 // wrong
                            }
                        }],
                        cvssMetricV30 = [new CvssMetricV30()
                        {
                            cvssData = new CvssData()
                            {
                                baseScore = 1.0 // wrong
                            }
                        }],
                        cvssMetricV31 = [new CvssMetricV31()
                                                   {
                            cvssData = new CvssData()
                            {
                                baseScore = _correctVulnerabilities[2].Item2 // this is the correct one
                            }
                        }],
                    },
                }
            }
            ]
    };

    private readonly ServerStatusDataType _serverStatusDataType = new()
    {
        BuildInfo = new BuildInfo()
        {
            ProductName = "doesnotmatter",
            ManufacturerName = "doesnotmatter",
            SoftwareVersion = "doesnotmatter"
        }
    };

    private EndpointDescription endpointDescription = new()
    {
        UserIdentityTokens = new UserTokenPolicyCollection(new List<UserTokenPolicy> { new(UserTokenType.Certificate) }),
        EndpointUrl = "opc.tcp://localhost:4840",
    };

    public KnownVulnerabilityPluginTest()
    {
        _plugin = new(_logger.Object, _knownVulnerabilityUtil.Object);
        _session.Setup(session => session.Endpoint).Returns(endpointDescription);
    }

    [Fact]
    public async Task DoesNotReportFalsePositive()
    {
        // arrange
        _knownVulnerabilityUtil.Setup(
            x => x.PostAsJsonAsync(
                It.IsAny<BuildInfo>()
                )).ReturnsAsync(new HttpResponseMessage()
                {
                    Content = JsonContent.Create(_emptyCveResult)
                });
        _session.Setup(
            x => x.ReadValue(It.IsAny<NodeId>(), It.IsAny<Type>())
            ).Returns(_serverStatusDataType);

        // act
        List<Issue> issues = await _plugin.Run(_session.Object);

        // assert
        Assert.Empty(issues);
    }

    [Fact]
    public async Task ReportsIssues()
    {
        // arrange
        _knownVulnerabilityUtil.Setup(x => x.PostAsJsonAsync(
                It.IsAny<BuildInfo>()
                )).ReturnsAsync(new HttpResponseMessage()
                {
                    Content = JsonContent.Create(_cveResult)
                });
        _session.Setup(
            x => x.ReadValue(It.IsAny<NodeId>(), It.IsAny<Type>())
            ).Returns(_serverStatusDataType);

        // act
        List<Issue> issues = await _plugin.Run(_session.Object);

        // assert
        Assert.True(issues.Count == _cveResult.vulnerabilities.Count);
        foreach ((string cve, double severity) in _correctVulnerabilities)
        {
            Assert.Contains(issues, x => x.Name == cve && x.Severity == severity);
        }
    }

    [Fact]
    public async Task ReportsEmptyIssuesIfExceptionThrownOnHttpClient()
    {
        // arrange
        _knownVulnerabilityUtil.Setup(x => x.PostAsJsonAsync(
                It.IsAny<BuildInfo>()
                )).Throws(new HttpRequestException());
        _session.Setup(
            x => x.ReadValue(It.IsAny<NodeId>(), It.IsAny<Type>())
            ).Returns(_serverStatusDataType);

        // act
        List<Issue> issues = await _plugin.Run(_session.Object);

        // assert
        Assert.Empty(issues);
    }

    [Fact]
    public async Task ReportsEmptyIssuesIfServerStatusIsNull()
    {
        // arrange
        //_session.Setup(x => x.ReadValue(It.IsAny<NodeId>(), It.IsAny<Type>())).Returns(null);

        // act
        List<Issue> issues = await _plugin.Run(_session.Object);

        // assert
        Assert.Empty(issues);
    }

    [Fact]
    public async Task ReportsEmptyIssuesIfHttpReturnsNon200Result()
    {
        // arrange

        // return 500
        _knownVulnerabilityUtil.Setup(x => x.PostAsJsonAsync(
                It.IsAny<BuildInfo>()
                )).ReturnsAsync(new HttpResponseMessage(System.Net.HttpStatusCode.InternalServerError));
        _session.Setup(
            x => x.ReadValue(It.IsAny<NodeId>(), It.IsAny<Type>())
            ).Returns(_serverStatusDataType);

        // act
        List<Issue> issues = await _plugin.Run(_session.Object);

        // assert
        Assert.Empty(issues);
    }

}
