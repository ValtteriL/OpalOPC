using Microsoft.Extensions.Logging;
using Model;
using Moq;
using Plugin;
using Xunit;

namespace Tests;
public class KnownVulnerabilityPluginTest
{

    private readonly Mock<ILogger> _logger = new();
    private readonly Mock<IHttpClientFactory> _mockClientFactory = new();
    private readonly Mock<HttpClient> _mockHttpClient = new();
    private readonly KnownVulnerabilityPlugin _plugin;

    private CVEResult _emptyCveResult = new()
    {
        format = "doesnotmatter",
        version = "doesnotmatter",
        vulnerabilities = []
    };

    public KnownVulnerabilityPluginTest()
    {
        _plugin = new(_logger.Object, _mockClientFactory.Object);
        _mockClientFactory.Setup(x => x.CreateClient()).Returns(_mockHttpClient.Object);
    }

    [Fact]
    public void DoesNotReportFalsePositive()
    {
        // arrange
        _mockHttpClient.Setup(x => x.GetAsync(It.IsAny<string>())).ReturnsAsync(new HttpResponseMessage(HttpStatusCode.OK));

        // act
        List<Issue> issues = _plugin.Run(new());

        // assert
        Assert.NotEmpty(issues);
    }

    [Fact]
    public void ReportsIssues()
    {
        // arrange

        // act

        // assert
    }

    [Fact]
    public void ReportsEmptyIssuesIfExceptionThrownOnHttpClient()
    {
        // arrange

        // act

        // assert
    }

    [Fact]
    public void ReportsEmptyIssuesIfServerStatusIsNull()
    {
        // arrange

        // act

        // assert
    }

    [Fact]
    public void ReportsEmptyIssuesIfHttpReturnsNon200Result()
    {
        // arrange

        // act

        // assert
    }

}
